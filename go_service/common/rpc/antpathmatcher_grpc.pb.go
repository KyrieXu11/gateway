// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntPathMatcherClient is the client API for AntPathMatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntPathMatcherClient interface {
	Match(ctx context.Context, opts ...grpc.CallOption) (AntPathMatcher_MatchClient, error)
}

type antPathMatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewAntPathMatcherClient(cc grpc.ClientConnInterface) AntPathMatcherClient {
	return &antPathMatcherClient{cc}
}

func (c *antPathMatcherClient) Match(ctx context.Context, opts ...grpc.CallOption) (AntPathMatcher_MatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &AntPathMatcher_ServiceDesc.Streams[0], "/rpc.AntPathMatcher/match", opts...)
	if err != nil {
		return nil, err
	}
	x := &antPathMatcherMatchClient{stream}
	return x, nil
}

type AntPathMatcher_MatchClient interface {
	Send(*Paths) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type antPathMatcherMatchClient struct {
	grpc.ClientStream
}

func (x *antPathMatcherMatchClient) Send(m *Paths) error {
	return x.ClientStream.SendMsg(m)
}

func (x *antPathMatcherMatchClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AntPathMatcherServer is the server API for AntPathMatcher service.
// All implementations must embed UnimplementedAntPathMatcherServer
// for forward compatibility
type AntPathMatcherServer interface {
	Match(AntPathMatcher_MatchServer) error
	mustEmbedUnimplementedAntPathMatcherServer()
}

// UnimplementedAntPathMatcherServer must be embedded to have forward compatible implementations.
type UnimplementedAntPathMatcherServer struct {
}

func (UnimplementedAntPathMatcherServer) Match(AntPathMatcher_MatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Match not implemented")
}
func (UnimplementedAntPathMatcherServer) mustEmbedUnimplementedAntPathMatcherServer() {}

// UnsafeAntPathMatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntPathMatcherServer will
// result in compilation errors.
type UnsafeAntPathMatcherServer interface {
	mustEmbedUnimplementedAntPathMatcherServer()
}

func RegisterAntPathMatcherServer(s grpc.ServiceRegistrar, srv AntPathMatcherServer) {
	s.RegisterService(&AntPathMatcher_ServiceDesc, srv)
}

func _AntPathMatcher_Match_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AntPathMatcherServer).Match(&antPathMatcherMatchServer{stream})
}

type AntPathMatcher_MatchServer interface {
	SendAndClose(*Result) error
	Recv() (*Paths, error)
	grpc.ServerStream
}

type antPathMatcherMatchServer struct {
	grpc.ServerStream
}

func (x *antPathMatcherMatchServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *antPathMatcherMatchServer) Recv() (*Paths, error) {
	m := new(Paths)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AntPathMatcher_ServiceDesc is the grpc.ServiceDesc for AntPathMatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntPathMatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.AntPathMatcher",
	HandlerType: (*AntPathMatcherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "match",
			Handler:       _AntPathMatcher_Match_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/antpathmatcher.proto",
}
